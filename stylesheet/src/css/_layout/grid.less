@gutter: (2 * round(@padding/2));

.row, .row--gutter, .row--gutter--horizontal {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  & > * {
    flex-grow: 0;
    flex-shrink: 1;
  }
}
.row--gutter {
  margin-left: round(-@gutter/2);
  margin-right: round(-@gutter/2);
  & > * {
    margin-bottom: @gutter;
  }
}
.row--gutter--horizontal {
  margin-left: round(-@gutter/2);
  margin-right: round(-@gutter/2);
}
.renderGridRules(@name, @cols) {
  & > .@{name}@{cols} {
    width: (100% / 12) * @cols;
  }
  & > .offset--@{name}@{cols} {
    margin-left: (100% / 12) * @cols;
  }
}
.renderGridRulesWithGutter(@name, @cols) {
  & > .@{name}@{cols} {
    width: calc( (100% / 12) * @cols ~" - " @gutter);
    margin-left: round(@gutter / 2);
    margin-right: round(@gutter / 2);
  }
  & > .offset--@{name}@{cols} {
    margin-left: calc( (100% / 12) * @cols) !important;
  }
}
.row {
  .renderGridRules(s, 1);
  .renderGridRules(s, 2);
  .renderGridRules(s, 3);
  .renderGridRules(s, 4);
  .renderGridRules(s, 5);
  .renderGridRules(s, 6);
  .renderGridRules(s, 7);
  .renderGridRules(s, 8);
  .renderGridRules(s, 9);
  .renderGridRules(s, 10);
  .renderGridRules(s, 11);
  .renderGridRules(s, 12);
}
.row--gutter, .row--gutter--horizontal {
  .offset--s0 {
    margin-left: @gutter/2 !important;
  }
  .renderGridRulesWithGutter(s, 1);
  .renderGridRulesWithGutter(s, 2);
  .renderGridRulesWithGutter(s, 3);
  .renderGridRulesWithGutter(s, 4);
  .renderGridRulesWithGutter(s, 5);
  .renderGridRulesWithGutter(s, 6);
  .renderGridRulesWithGutter(s, 7);
  .renderGridRulesWithGutter(s, 8);
  .renderGridRulesWithGutter(s, 9);
  .renderGridRulesWithGutter(s, 10);
  .renderGridRulesWithGutter(s, 11);
  .renderGridRulesWithGutter(s, 12);
}

@media only screen and (min-width: @widthMobile) {
  .row {
    .renderGridRules(m, 1);
    .renderGridRules(m, 2);
    .renderGridRules(m, 3);
    .renderGridRules(m, 4);
    .renderGridRules(m, 5);
    .renderGridRules(m, 6);
    .renderGridRules(m, 7);
    .renderGridRules(m, 8);
    .renderGridRules(m, 9);
    .renderGridRules(m, 10);
    .renderGridRules(m, 11);
    .renderGridRules(m, 12);
  }
  .row--gutter {
    .offset--m0 {
      margin-left: @gutter/2 !important;
    }
    .renderGridRulesWithGutter(m, 1);
    .renderGridRulesWithGutter(m, 2);
    .renderGridRulesWithGutter(m, 3);
    .renderGridRulesWithGutter(m, 4);
    .renderGridRulesWithGutter(m, 5);
    .renderGridRulesWithGutter(m, 6);
    .renderGridRulesWithGutter(m, 7);
    .renderGridRulesWithGutter(m, 8);
    .renderGridRulesWithGutter(m, 9);
    .renderGridRulesWithGutter(m, 10);
    .renderGridRulesWithGutter(m, 11);
    .renderGridRulesWithGutter(m, 12);
  }

}
@media only screen and (min-width: @widthTablet) {
  .row {
    .renderGridRules(l, 1);
    .renderGridRules(l, 2);
    .renderGridRules(l, 3);
    .renderGridRules(l, 4);
    .renderGridRules(l, 5);
    .renderGridRules(l, 6);
    .renderGridRules(l, 7);
    .renderGridRules(l, 8);
    .renderGridRules(l, 9);
    .renderGridRules(l, 10);
    .renderGridRules(l, 11);
    .renderGridRules(l, 12);
  }
  .row--gutter {
    .offset--l0 {
      margin-left: @gutter/2 !important;
    }
    .renderGridRulesWithGutter(l, 1);
    .renderGridRulesWithGutter(l, 2);
    .renderGridRulesWithGutter(l, 3);
    .renderGridRulesWithGutter(l, 4);
    .renderGridRulesWithGutter(l, 5);
    .renderGridRulesWithGutter(l, 6);
    .renderGridRulesWithGutter(l, 7);
    .renderGridRulesWithGutter(l, 8);
    .renderGridRulesWithGutter(l, 9);
    .renderGridRulesWithGutter(l, 10);
    .renderGridRulesWithGutter(l, 11);
    .renderGridRulesWithGutter(l, 12);
  }
}

