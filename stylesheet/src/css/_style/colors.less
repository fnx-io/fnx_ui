
// http://www.google.com/design/spec/style/color.html#color-color-palette

@level1: 5%;
@level2: @level1 * 2;
@level3: @level1 * 3;
@level4: @level1 * 4;

// GREY DEFAULTS
html {
    background-color: @colorBackgroundDefault;
    color: @colorTextDefault;
}

a {
    color: @colorTextDefault;
    &:visited {
        color: @colorTextDefault;
    }
    &:hover {
        color: @colorLinkDefault;
    }
}
.menu--vertical, .menu--horizontal, .btn, .multibutton, .picker__header, .navbar, .icon {
    a {
        color: inherit;
    }
}

.selected {
    .renderHover(@colorBackgroundDefault);
}

.disabled {
    &, * {
        color: @colorDisabledText !important;
        cursor: not-allowed;
    }
}

.renderBgAndText(@hexa) {
    background-color: @hexa;
    & when (luma(color(@hexa)) <= 60%) {
        color: @colorLightTextDefault;
    }
    & when (luma(color(@hexa)) > 40%) {
        color: @colorTextDefault;
    }
}
.renderBgAndTextImportant(@hexa) {
    background-color: @hexa !important;
    & when (luma(color(@hexa)) <= 60%) {
        color: @colorLightTextDefault !important;
    }
    & when (luma(color(@hexa)) > 40%) {
        color: @colorTextDefault !important;
    }
}

.renderHover(@hexa) {
    & when (luma(color(@hexa)) <= 60%) {
        .renderBgAndText(lighten(color(@hexa), @level2));
    }
    & when (luma(color(@hexa)) > 40%) {
        .renderBgAndText(darken(color(@hexa), @level2));
    }
}
.renderHoverImportant(@hexa) {
    & when (luma(color(@hexa)) <= 60%) {
        .renderBgAndTextImportant(lighten(color(@hexa), @level2));
    }
    & when (luma(color(@hexa)) > 40%) {
        .renderBgAndTextImportant(darken(color(@hexa), @level2));
    }
}

.renderMenuColors(@hexa, @depth) {
    .renderBgAndText(@hexa);
    & > li {
        &:hover:not(.disabled) {
            .renderHover(@hexa);
            & when (@depth > 0) {
                & > .menu--vertical {
                    & when (luma(color(@hexa)) <= 60%) {
                        .renderMenuColors(lighten(color(@hexa), @level2), @depth - 1);
                    }
                    & when (luma(color(@hexa)) > 40%) {
                        .renderMenuColors(darken(color(@hexa), @level2), @depth - 1);
                    }
                }
            }
        }
    }
}

.renderColorSettings(@hexa) {
    .renderBgAndTextImportant(@hexa);
    &.btn--fab, &.btn {
        &:hover:not(:disabled):not(.disabled) {
            .renderHoverImportant(@hexa);
        }
    }
}
.renderTheme(@hexaColor, @themeName) {

    .theme--@{themeName} {
        .renderThemeColors(@hexaColor);
    }
    .accent--@{themeName} {
        .renderAccentColors(@hexaColor);
    }
}
.renderColorRules(@hexa, @name) {

    .bg--@{name} {
        .renderColorSettings(@hexa);
        &--l1 {
            .renderColorSettings(lighten(color(@hexa), @level1));
        }
        &--l2 {
            .renderColorSettings(lighten(color(@hexa), @level2));
        }
        &--l3 {
            .renderColorSettings(lighten(color(@hexa), @level3));
        }
        &--l4 {
            .renderColorSettings(lighten(color(@hexa), @level4));
        }
        &--d1 {
            .renderColorSettings(darken(color(@hexa), @level1));
        }
        &--d2 {
            .renderColorSettings(darken(color(@hexa), @level2));
        }
        &--d3 {
            .renderColorSettings(darken(color(@hexa), @level3));
        }
        &--d4 {
            .renderColorSettings(darken(color(@hexa), @level4));
        }
    }
    body {
        .text--@{name} {
            color: @hexa;
            &--l1 {
                color: (lighten(color(@hexa), @level1));
            }
            &--l2 {
                color: (lighten(color(@hexa), @level2));
            }
            &--l3 {
                color: (lighten(color(@hexa), @level3));
            }
            &--l4 {
                color: (lighten(color(@hexa), @level4));
            }
            &--d1 {
                color: (darken(color(@hexa), @level1));
            }
            &--d2 {
                color: (darken(color(@hexa), @level2));
            }
            &--d3 {
                color: (darken(color(@hexa), @level3));
            }
            &--d4 {
                color: (darken(color(@hexa), @level4));
            }
        }
    }

    .renderTheme(@hexa, @name);

    //.renderTheme(lighten(color(@hexa), @level1), ~"@{name}--l1");
    .renderTheme(lighten(color(@hexa), @level2), ~"@{name}--l2");
    //.renderTheme(lighten(color(@hexa), @level3), ~"@{name}--l3");
    .renderTheme(lighten(color(@hexa), @level4), ~"@{name}--l4");
    //.renderTheme(darken(color(@hexa), @level1), ~"@{name}--d1");
    .renderTheme(darken(color(@hexa), @level2), ~"@{name}--d2");
    //.renderTheme(darken(color(@hexa), @level3), ~"@{name}--d3");
    .renderTheme(darken(color(@hexa), @level4), ~"@{name}--d4");
}

@import "colors--utils";

html {

    .renderThemeColors(@colorBackgroundThemeDefault);
    .renderAccentColors(#333);

    .renderColorRules(#000, black);
    .renderColorRules(#fff, white);
    .renderColorRules(@colorFnxOrange, fnx);
    .renderColorRules(@colorRed, red);
    .renderColorRules(@colorPink, pink);
    .renderColorRules(@colorPurple, purple);

    .renderColorRules(@colorDeepPurple, deep-purple);
    .renderColorRules(@colorIndigo, indigo);
    .renderColorRules(@colorBlue, blue);
    .renderColorRules(@colorLightBlue, light-blue);
    .renderColorRules(@colorCyan, cyan);
    .renderColorRules(@colorTeal, teal);

    .renderColorRules(@colorGreen, green);
    .renderColorRules(@colorLightGreen, light-green);
    .renderColorRules(@colorLime, lime);

    .renderColorRules(@colorYellow, yellow);
    .renderColorRules(@colorAmber, amber);
    .renderColorRules(@colorOrange, orange);
    .renderColorRules(@colorDeepOrange, deep-orange);
    .renderColorRules(@colorBrown, brown);
    .renderColorRules(@colorGrey, grey);
    .renderColorRules(@colorBlueGrey, blue-grey);
}