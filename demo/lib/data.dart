import 'package:fnx_ui_demo/src/model/component.dart';

export 'package:fnx_ui_demo/src/model/component.dart';

List<ComponentModel> componentsData = [
  const ComponentModel(
    tag: 'fnx-alert',
    className: 'FnxAlert',
    linkName: 'Alert',
    description: 'Creates standardized (very visible) box with warning, error, important notice etc.',
    ios: const [
      const IoModel.input(
        name: 'type',
        type: 'String',
        description: 'One of possible predefined types: "info", "warning", "error", "success".',
      ),
      const IoModel.input(
        name: 'closable',
        type: 'bool',
        description: 'Displays small cross icon which hides the message.',
      ),
      const IoModel.input(
        name: 'colorClass',
        type: 'String',
        description: 'Use to customize colors: bg--red text--yellow.',
      ),
      const IoModel.input(
        name: 'icon',
        type: 'String',
        description: 'Use to customize icon. Possible values are icon names from material design icons.',
      ),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-app',
    className: 'FnxApp',
    linkName: 'App',
    description: 'Provides usefull methods for toast, simple "alert" style dialogs, manages exceptions.',
  ),
  const ComponentModel(
    tag: 'fnx-autocomplete',
    className: 'FnxAutocomplete',
    linkName: 'Autocomplete',
    ngModelCompatible: true,
    ios: const [
      const IoModel.input(name: 'required', type: 'bool'),
      const IoModel.input(name: 'readonly', type: 'bool'),
      const IoModel.input(name: 'nullable', type: 'bool'),
      const IoModel.input(name: 'placeholder', type: 'String'),
      const IoModel.input(name: 'optionsProvider', type: 'OptionsProvider'),
      const IoModel.input(name: 'defaultOptionProvider', type: 'DefaultOptionProvider'),
      const IoModel.input(name: 'text', type: 'String'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-cc',
    className: 'FnxCc',
    linkName: 'Cc',
    description: 'Cookies consent',
    ios: const [
      const IoModel.input(name: 'label', type: 'String'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-check',
    className: 'FnxCheck',
    linkName: 'Check',
    ngModelCompatible: true,
    ios: const [
      const IoModel.input(name: 'required', type: 'bool'),
      const IoModel.input(name: 'readonly', type: 'bool'),
      const IoModel.input(name: 'disabled', type: 'bool'),
      const IoModel.input(name: 'label', type: 'String'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-date',
    className: 'FnxDate',
    linkName: 'Date',
    ngModelCompatible: true,
    ios: const [
      const IoModel.input(name: 'required', type: 'bool'),
      const IoModel.input(name: 'readonly', type: 'bool'),
      const IoModel.input(name: 'dateTime', type: 'bool'),
      const IoModel.output(
        name: 'dateStr',
        type: 'String',
        description:
            'This is the model for the DOM input field, user types here the date and we try to parse it and sync it to model.',
      ),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-double',
    className: 'FnxDouble',
    linkName: 'Double',
    ngModelCompatible: true,
    ios: const [
      const IoModel.input(name: 'required', type: 'bool'),
      const IoModel.input(name: 'min', type: 'num'),
      const IoModel.input(name: 'max', type: 'num'),
      const IoModel.input(name: 'step', type: 'num'),
      const IoModel.input(name: 'placeholder', type: 'String'),
      const IoModel.input(name: 'autocomplete', type: 'bool'),
      const IoModel.input(name: 'readonly', type: 'bool'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-file',
    className: 'FnxFile',
    linkName: 'File',
    ngModelCompatible: true,
    ios: const [
      const IoModel.input(name: 'required', type: 'bool'),
      const IoModel.input(name: 'readonly', type: 'bool'),
      const IoModel.input(name: 'multi', type: 'bool'),
      const IoModel.input(name: 'fileName', type: 'String'),
      const IoModel.output(name: 'files', type: 'EventEmitter'),
      const IoModel.input(name: 'browseLabel', type: 'String'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-form',
    className: 'FnxForm',
    linkName: 'Form',
    ios: const [
      const IoModel.input(name: 'disabled', type: 'bool'),
      const IoModel.input(name: 'readonly', type: 'bool'),
      const IoModel.output(name: 'submit', type: 'EventEmitter<Event>'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-form-errors',
    className: 'FnxFormErrors',
    linkName: 'FormErrors',
  ),
  const ComponentModel(
    tag: 'fnx-formatted-double',
    className: 'FnxFormattedDouble',
    linkName: 'FormattedDouble',
    ngModelCompatible: true,
    ios: const [
      const IoModel.input(name: 'required', type: 'bool'),
      const IoModel.input(name: 'min', type: 'num'),
      const IoModel.input(name: 'max', type: 'num'),
      const IoModel.input(name: 'format', description: 'Default is "#,##0.00".', type: 'String'),
      const IoModel.input(name: 'placeholder', type: 'String'),
      const IoModel.input(name: 'autocomplete', type: 'bool'),
      const IoModel.input(name: 'readonly', type: 'bool'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-icon',
    className: 'FnxIcon',
    linkName: 'Icon',
    ios: const [
      const IoModel.input(name: 'type', type: 'String'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-image-crop',
    className: 'FnxImageCrop',
    linkName: 'ImageCrop',
    ios: const [
      const IoModel.input(name: 'ratio', description: 'Required crop ratio - width:height.', type: 'double'),
      const IoModel.input(name: 'src', type: 'String'),
      const IoModel.output(name: 'crop', type: 'EventEmitter<Rectangle<double>>'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-input',
    className: 'FnxInput',
    linkName: 'Input',
    ios: const [
      const IoModel.input(name: 'label', type: 'String'),
      const IoModel.input(name: 'errorMessage', type: 'String'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-int',
    className: 'FnxInt',
    linkName: 'Int',
    ngModelCompatible: true,
    ios: const [
      const IoModel.input(name: 'required', type: 'bool'),
      const IoModel.input(name: 'min', type: 'num'),
      const IoModel.input(name: 'max', type: 'num'),
      const IoModel.input(name: 'placeholder', type: 'String'),
      const IoModel.input(name: 'autocomplete', type: 'bool'),
      const IoModel.input(name: 'readonly', type: 'bool'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-layout-sidebar',
    className: 'FnxLayoutSidebar',
    linkName: 'LayoutSidebar',
    ios: const [
      const IoModel.input(name: 'responsive', type: 'bool'),
      const IoModel.input(name: 'widthPx', type: 'int'),
      const IoModel.input(name: 'sidebarVisible', type: 'bool'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-modal',
    className: 'FnxModal',
    linkName: 'Modal',
    ios: const [
      const IoModel.input(name: 'width', type: 'String'),
      const IoModel.input(
        name: 'close',
        type: 'EventEmitter<bool>',
        description: 'Catch it and hide this window, user clicked the "close" icon.',
      ),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-option',
    className: 'FnxOption',
    linkName: 'Option',
    ios: const [
      const IoModel.input(name: 'value', type: 'dynamic'),
      const IoModel.input(name: 'label', type: 'String'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-panel',
    className: 'FnxPanel',
    linkName: 'Panel',
    description: 'Nice "fieldset". It should have a header, defined with attribute "header".',
    ios: const [
      const IoModel.input(
        name: 'closable',
        type: 'bool',
        description: 'Can by collapsed or expanded by user. Default = false = always open.',
      ),
      const IoModel.input(name: 'open', type: 'bool'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-panel-small',
    className: 'FnxPanelSmall',
    linkName: 'PanelSmall',
    description: 'Nice "fieldset", smaller and less contrasting then fnx-panel... It should have a header, defined with attribute "header".',
    ios: const [
      const IoModel.input(
        name: 'closable',
        type: 'bool',
        description: 'Can by collapsed or expanded by user. Default = false = always open.',
      ),
      const IoModel.input(name: 'open', type: 'bool'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-scroll-panel',
    className: 'FnxScrollPanel',
    linkName: 'ScrollPanel',
    description: 'Srollable panel which emits (loadMore) event whenever the user scrolls to the bottom of current content. Make sure the panel has some height, either set it to some value (style="height: 20em") or place the panel into `<div class="flex--column">` etc.',
    ios: const [
      const IoModel.input(name: 'debounceMs', type: 'int', description: 'Events might be emmited very frequently. "200" might be a reasonable value, default is 80.'),
      const IoModel.output(name: 'loadMore', type: 'EventEmitter'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-select',
    className: 'FnxSelect',
    linkName: 'Select',
    ngModelCompatible: true,
    ios: const [
      const IoModel.input(name: 'required', type: 'bool'),
      const IoModel.input(name: 'neverShowFilter', type: 'bool'),
      const IoModel.input(name: 'alwaysShowFilter', type: 'bool'),
      const IoModel.input(name: 'readonly', type: 'bool'),
      const IoModel.input(name: 'nullable', type: 'bool'),
      const IoModel.input(name: 'valueDescriptionRenderer', type: 'ValueDescriptionRenderer'),
      const IoModel.input(name: 'selectionEmptyLabel', type: 'String'),
      const IoModel.input(name: 'optionsEmptyLabel', type: 'String'),
      const IoModel.input(name: 'optionsEmptySearchLabel', type: 'String'),
      const IoModel.input(name: 'filterPlaceholder', type: 'String'),
      const IoModel.input(name: 'multi', type: 'bool'),
      const IoModel.input(name: 'filter', type: 'String'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-submit-bar',
    className: 'FnxSubmitBar',
    linkName: 'SubmitBar',
    ios: const [
      const IoModel.input(name: 'label', type: 'String', description: 'Use it to change label on submit button.'),
      const IoModel.input(name: 'goBackLabel', type: 'String', description: 'Use it to change label on back button.'),
      const IoModel.input(name: 'back', type: 'bool', description: 'Determines if back button is allowed.'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-tab',
    className: 'FnxTab',
    linkName: 'Tab',
    ios: const [
      const IoModel.input(name: 'title', type: 'String'),
      const IoModel.output(name: 'select', type: 'EventEmitter<bool>'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-tabs',
    className: 'FnxTabs',
    linkName: 'Tabs',
    ios: const [
      const IoModel.input(name: 'left', type: 'bool'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-text',
    className: 'FnxText',
    linkName: 'Text',
    description: 'Text input.',
    ngModelCompatible: true,
    ios: const [
      const IoModel.input(name: 'required', type: 'bool'),
      const IoModel.input(name: 'minLength', type: 'int'),
      const IoModel.input(name: 'maxLength', type: 'int'),
      const IoModel.input(name: 'min', type: 'int'),
      const IoModel.input(name: 'max', type: 'int'),
      const IoModel.input(name: 'type', type: 'String', description: 'Possible values are "text", "number", "email", "http".'),
      const IoModel.input(name: 'placeholder', type: 'String'),
      const IoModel.input(name: 'autocomplete', type: 'bool'),
      const IoModel.input(name: 'readonly', type: 'bool'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-textarea',
    className: 'FnxTextarea',
    linkName: 'Textarea',
    ngModelCompatible: true,
    ios: const [
      const IoModel.input(name: 'required', type: 'bool'),
      const IoModel.input(name: 'minLength', type: 'int'),
      const IoModel.input(name: 'maxLength', type: 'int'),
      const IoModel.input(name: 'readonly', type: 'bool'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-wysiwyg-poor',
    className: 'FnxWysiwygPoor',
    linkName: 'WysiwygPoor',
    ngModelCompatible: true,
    ios: const [
      const IoModel.input(name: 'required', type: 'bool'),
      const IoModel.input(name: 'readonly', type: 'bool'),
    ],
  ),
  const ComponentModel(
    tag: 'fnx-wysiwyg-rich',
    className: 'FnxWysiwygRich',
    linkName: 'WysiwygRich',
    ngModelCompatible: true,
    ios: const [
      const IoModel.input(name: 'required', type: 'bool'),
      const IoModel.input(name: 'readonly', type: 'bool'),
      const IoModel.input(name: 'height', type: 'String'),
      const IoModel.input(name: 'maxWidth', type: 'String'),
      const IoModel.input(name: 'imagePicker', type: 'PickImageUlr'),
      const IoModel.input(name: 'safe', type: 'bool'),
      const IoModel.input(name: 'initWithHtmlView', type: 'bool'),
    ],
  ),
];
